title: Git Clone Repository
summary: The Step checks out the defined repository state, optionally updates the repository submodules and exports the achieved git repository state properties.
description: |
  The checkout process depends on the checkout properties: the Step either checks out a repository state defined by a git commit or a git tag, or achieves a merged state of a pull / merge request.
  The Step uses two solutions to achieve the merged state of the pull / merge request: auto merge in the case of a merge branch or diff file (provided by the Git service) and manual merge otherwise.
  Once the desired state is checked out, the Step optionally updates the submodules. In the case of pull / merge request, the Step checks out a detach head and exports the achieved git state properties.

  ### Configuring the Step

  1. The **Git repository URL** and the ** Clone destination (local)directory path** fields are required fields and are automatically filled out based on your project settings.
  Optionally, you can modify the following fields in the **Clone Config** section:
  1. You can set the **Update the registered submodules?** option to `yes` to pull the most up-to-date version of the submodule from the submodule's repository.
  2. You can set the number of commits you want the Step to fetch in the **Limit fetching to the specified number of commits** option. Make sure you set a decimal number.

  Other **Clone config** inputs are not editable unless you go to the **bitrise.yml** tab, however, to avoid issues, we suggest you to contact our Support team instead.

  ### Troubleshooting
  If you have GitHub Enterprise set up, it works slightly differently on [bitrise.io](https://www.bitrise.io) than on [github.com](https://github.com). You have to manually set the git clone URL, register the SSH key and the webhook.
  If you face network issues in the case of self-hosted git servers, we advise you to contact our Support Team to help you out.
  If you face slow clone speed, set the **Limit fetching to the specified number of commits** to the number of commits you want to clone instead of cloning the whole commit history or you can use the Git LFS solution provided by the git provider.

  ### Useful links

  - [How to register a GitHub Enterprise repository](https://discuss.bitrise.io/t/how-to-register-a-github-enterprise-repository/218)
  - [Code security](https://devcenter.bitrise.io/getting-started/code-security/)

  ### Related Steps

  - [Activate SSH key (RSA private key)](https://www.bitrise.io/integrations/steps/activate-ssh-key)
  - [Bitrise.io Cache:Pull](https://www.bitrise.io/integrations/steps/cache-pull)
  - [Bitrise.io Cache:Push](https://www.bitrise.io/integrations/steps/cache-push)

website: https://github.com/bitrise-steplib/steps-git-clone
source_code_url: https://github.com/bitrise-steplib/steps-git-clone
support_url: https://github.com/bitrise-steplib/steps-git-clone/issues
type_tags:
- utility
is_requires_admin_user: false
is_always_run: false
is_skippable: false
run_if: .IsCI
deps:
  brew:
  - name: git-lfs
  apt_get:
  - name: git-lfs
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-git-clone
inputs:
- repository_url: $GIT_REPOSITORY_URL
  opts:
    title: Git repository URL
    description: SSH or HTTPS URL of the repository to clone
    is_required: true
    is_dont_change_value: true
- clone_into_dir: $BITRISE_SOURCE_DIR
  opts:
    title: Clone destination directory
    description: Local directory where the repository is cloned
    is_required: true
- commit: $BITRISE_GIT_COMMIT
  opts:
    category: Clone arguments
    title: Git commit to checkout
    description: Commit SHA to checkout
    is_dont_change_value: true
- tag: $BITRISE_GIT_TAG
  opts:
    category: Clone arguments
    title: Git tag
    description: Git tag to checkout
    is_dont_change_value: true
- branch: $BITRISE_GIT_BRANCH
  opts:
    category: Clone arguments
    title: Git branch
    description: Git branch to checkout
    is_dont_change_value: true
- branch_dest: $BITRISEIO_GIT_BRANCH_DEST
  opts:
    category: Clone arguments
    title: Pull request destination branch
    description: The branch that the pull request targets, such as `main`
    is_dont_change_value: true
- pull_request_id: $PULL_REQUEST_ID
  opts:
    category: Clone arguments
    title: Pull request ID
    description: Pull request number, coming from the Git provider
    is_dont_change_value: true
- pull_request_repository_url: $BITRISEIO_PULL_REQUEST_REPOSITORY_URL
  opts:
    category: Clone arguments
    title: Pull request source repository
    summary: URL of the source repository of a pull request.
    description: |-
      URL of the source repository of a pull request.

      This points to the fork repository in builds triggered by pull requests.
    is_dont_change_value: true
- pull_request_merge_branch: $BITRISEIO_PULL_REQUEST_MERGE_BRANCH
  opts:
    category: Clone arguments
    title: Pull request merge ref
    description: |-
      Git ref pointing to the result of merging the PR branch into the destination branch. Even if the source of the PR is a fork, this is a reference to the destination repository.

      Example: `refs/pull/14/merge`

      Note: not all Git services provide this value.
    is_dont_change_value: true
- pull_request_head_branch: $BITRISEIO_PULL_REQUEST_HEAD_BRANCH
  opts:
    category: Clone arguments
    title: Pull request head ref
    description: |-
      Git ref pointing to the head of the PR branch. Even if the source of the PR is a fork, this is a reference to the destination repository.

      Example: `refs/pull/14/head`

      Note: not all Git services provide this value.
    is_dont_change_value: true
- update_submodules: "yes"
  opts:
    category: Checkout options
    title: Update the registered submodules?
    description: |-
      Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules.
      If set to "no" `git fetch` calls will get the `--no-recurse-submodules` flag.
    value_options:
    - "yes"
    - "no"
- clone_depth:
  opts:
    category: Checkout options
    title: Limit fetching to the specified number of commits
    description: |-
      Limit fetching to the specified number of commits.
      The value should be a decimal number, for example `10`.
- submodule_update_depth:
  opts:
    category: Checkout options
    title: Submodule update depth
    description: |-
      Truncate the history to the specified number of revisions.
      The value should be a decimal number, for example `10`.
- merge_pr: "yes"
  opts:
    category: Checkout options
    title: Merge the Pull Request source branch into destination
    summary: Allows to validate a temporary merged state.
    description: |-
      Disables merging the source and destination branches.
      - `yes`: The default setting. Merges the source branch into the destination branch.
      - `no`: Treats Pull Request events as Push events on the source branch.
    value_options:
    - "yes"
    - "no"
- sparse_directories: ""
  opts:
    category: Checkout options
    title: Specify which directories to clone.
    description: |-
      Limit which directories should be cloned during the build. This could be useful if a repository contains multiple platforms, so called monorepositories, and the build is only targeting a single platform.
      For example, specifying "src/android" the Step will only clone:
      - contents of the root directory and
      - contents of the "src/android" directory and all subdirectories of "src/android".
      On the other hand, "src/ios" and any other directories will not be cloned.
- reset_repository: "No"
  opts:
    category: Debug
    title: Reset repository
    summary: Reset repository before fetching.
    description: Reset repository contents with `git reset --hard HEAD` and `git clean -f` before fetching.
    value_options:
    - "No"
    - "Yes"
- fetch_tags: "no"
  opts:
    category: Clone Config
    title: Fetch tags
    description: |-
      yes - fetch all tags from the remote by adding `--tags` flag to git fetch calls
      no - disable automatic tag following by adding `--no-tags` flag to git fetch calls
    value_options:
    - "yes"
    - "no"
- build_url: $BITRISE_BUILD_URL
  opts:
    category: Debug
    title: Bitrise Build URL
    summary: |-
      Unique build URL of this build on Bitrise.io
    description: |-
      Unique build URL of this build on Bitrise.io
    is_dont_change_value: true
- build_api_token: $BITRISE_BUILD_API_TOKEN
  opts:
    category: Debug
    title: Bitrise Build API Token
    summary: |-
      The build's API Token for the build on Bitrise.io
    description: |-
      The build's API Token for the build on Bitrise.io
    is_dont_change_value: true
    is_sensitive: true
outputs:
- GIT_CLONE_COMMIT_HASH:
  opts:
    title: Commit hash
    description: SHA hash of the checked-out commit.
- GIT_CLONE_COMMIT_MESSAGE_SUBJECT:
  opts:
    title: Commit message subject
    description: Commit message of the checked-out commit.
- GIT_CLONE_COMMIT_MESSAGE_BODY:
  opts:
    title: Commit message body
    description: Commit message body of the checked-out commit.
- GIT_CLONE_COMMIT_COUNT:
  opts:
    title: Commit count
    description: |-
      Commit count after checkout.

      Count will only work properly if no `--depth` option is set. If `--depth` is set then the history truncated to the specified number of commits. Count will **not** fail but will be the clone depth.
- GIT_CLONE_COMMIT_AUTHOR_NAME:
  opts:
    title: Commit author name
    description: Author of the checked-out commit.
- GIT_CLONE_COMMIT_AUTHOR_EMAIL:
  opts:
    title: Commit author email
    description: Email of the checked-out commit.
- GIT_CLONE_COMMIT_COMMITTER_NAME:
  opts:
    title: Committer name
    description: Committer name of the checked-out commit.
- GIT_CLONE_COMMIT_COMMITTER_EMAIL:
  opts:
    title: Committer email
    description: Email of the checked-out commit.
